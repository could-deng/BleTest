package com.dyq.bletest.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dyq.bletest.model.database.HrInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HR_INFO".
*/
public class HrInfoDao extends AbstractDao<HrInfo, Long> {

    public static final String TABLENAME = "HR_INFO";

    /**
     * Properties of entity HrInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mac_address = new Property(1, String.class, "mac_address", false, "MAC_ADDRESS");
        public final static Property Identify_start_time = new Property(2, String.class, "identify_start_time", false, "IDENTIFY_START_TIME");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property Matter = new Property(4, String.class, "matter", false, "MATTER");
        public final static Property Value = new Property(5, String.class, "value", false, "VALUE");
    };


    public HrInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HrInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HR_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MAC_ADDRESS\" TEXT," + // 1: mac_address
                "\"IDENTIFY_START_TIME\" TEXT," + // 2: identify_start_time
                "\"TIME\" TEXT," + // 3: time
                "\"MATTER\" TEXT," + // 4: matter
                "\"VALUE\" TEXT);"); // 5: value
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_HR_INFO_IDENTIFY_START_TIME ON HR_INFO" +
                " (\"IDENTIFY_START_TIME\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HR_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HrInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mac_address = entity.getMac_address();
        if (mac_address != null) {
            stmt.bindString(2, mac_address);
        }
 
        String identify_start_time = entity.getIdentify_start_time();
        if (identify_start_time != null) {
            stmt.bindString(3, identify_start_time);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String matter = entity.getMatter();
        if (matter != null) {
            stmt.bindString(5, matter);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(6, value);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HrInfo readEntity(Cursor cursor, int offset) {
        HrInfo entity = new HrInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mac_address
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // identify_start_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // matter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // value
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HrInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMac_address(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdentify_start_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMatter(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HrInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HrInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
